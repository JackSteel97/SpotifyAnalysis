// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SpotifyAnalysis.Database;

#nullable disable

namespace SpotifyAnalysis.Migrations
{
    [DbContext(typeof(SpotifyAnalysisContext))]
    [Migration("20211109202655_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AlbumArtist", b =>
                {
                    b.Property<string>("AlbumsSpotifyId")
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ArtistsSpotifyId")
                        .HasColumnType("character varying(100)");

                    b.HasKey("AlbumsSpotifyId", "ArtistsSpotifyId");

                    b.HasIndex("ArtistsSpotifyId");

                    b.ToTable("AlbumArtist");
                });

            modelBuilder.Entity("ArtistTrack", b =>
                {
                    b.Property<string>("ArtistsSpotifyId")
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TracksSpotifyId")
                        .HasColumnType("character varying(100)");

                    b.HasKey("ArtistsSpotifyId", "TracksSpotifyId");

                    b.HasIndex("TracksSpotifyId");

                    b.ToTable("ArtistTrack");
                });

            modelBuilder.Entity("SpotifyAnalysis.Database.Models.Album", b =>
                {
                    b.Property<string>("SpotifyId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ReleaseDate")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("SpotifyId");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("SpotifyAnalysis.Database.Models.Artist", b =>
                {
                    b.Property<string>("SpotifyId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Popularity")
                        .HasColumnType("integer");

                    b.HasKey("SpotifyId");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("SpotifyAnalysis.Database.Models.Stream", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DurationMs")
                        .HasColumnType("integer");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IncognitoMode")
                        .HasColumnType("boolean");

                    b.Property<string>("ReasonEnd")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("ReasonStart")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("Shuffle")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TrackId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.ToTable("Stream");
                });

            modelBuilder.Entity("SpotifyAnalysis.Database.Models.Track", b =>
                {
                    b.Property<string>("SpotifyId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<float>("Acousticness")
                        .HasColumnType("real");

                    b.Property<string>("AlbumId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<float>("Danceability")
                        .HasColumnType("real");

                    b.Property<float>("Energy")
                        .HasColumnType("real");

                    b.Property<float>("EstimatedTempo")
                        .HasColumnType("real");

                    b.Property<bool>("Explicit")
                        .HasColumnType("boolean");

                    b.Property<float>("Instrumentalness")
                        .HasColumnType("real");

                    b.Property<int>("Key")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Liveness")
                        .HasColumnType("real");

                    b.Property<float>("Loudness")
                        .HasColumnType("real");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PreviewUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<float>("Speechiness")
                        .HasColumnType("real");

                    b.Property<float>("TimeSignature")
                        .HasColumnType("real");

                    b.Property<int>("TrackLengthMs")
                        .HasColumnType("integer");

                    b.Property<float>("Valence")
                        .HasColumnType("real");

                    b.HasKey("SpotifyId");

                    b.HasIndex("AlbumId");

                    b.ToTable("Track");
                });

            modelBuilder.Entity("AlbumArtist", b =>
                {
                    b.HasOne("SpotifyAnalysis.Database.Models.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsSpotifyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotifyAnalysis.Database.Models.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsSpotifyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistTrack", b =>
                {
                    b.HasOne("SpotifyAnalysis.Database.Models.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsSpotifyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotifyAnalysis.Database.Models.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksSpotifyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpotifyAnalysis.Database.Models.Stream", b =>
                {
                    b.HasOne("SpotifyAnalysis.Database.Models.Track", "Track")
                        .WithMany("Streams")
                        .HasForeignKey("TrackId");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("SpotifyAnalysis.Database.Models.Track", b =>
                {
                    b.HasOne("SpotifyAnalysis.Database.Models.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId");

                    b.Navigation("Album");
                });

            modelBuilder.Entity("SpotifyAnalysis.Database.Models.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("SpotifyAnalysis.Database.Models.Track", b =>
                {
                    b.Navigation("Streams");
                });
#pragma warning restore 612, 618
        }
    }
}
